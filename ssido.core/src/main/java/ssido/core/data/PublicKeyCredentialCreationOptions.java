// Generated by delombok at Tue Sep 03 11:12:20 CEST 2019
// Copyright (c) 2018, Yubico AB
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
package ssido.core.data;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import ssido.util.CollectionUtil;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.TreeSet;
import javax.annotation.Nonnull;

/**
 * Parameters for a call to <code>navigator.credentials.create()</code>.

 *

 * @see <a href="https://www.w3.org/TR/webauthn/#dictdef-publickeycredentialcreationoptions">§5.4.

 * Options for Credential Creation (dictionary PublicKeyCredentialCreationOptions)</a>
 */
public final class PublicKeyCredentialCreationOptions {
    /**
     * Contains data about the Relying Party responsible for the request.
     * <p>
     * Its value's {@link RelyingPartyIdentity#id id} member specifies the <a href="https://www.w3.org/TR/webauthn/#rp-id">RP
     * ID</a> the credential should be scoped to. If omitted, its value will be set by the client. See {@link
     * RelyingPartyIdentity} for further details.
     * </p>
     */
    @Nonnull
    private final RelyingPartyIdentity rp;
    /**
     * Contains data about the user account for which the Relying Party is requesting attestation.
     */
    @Nonnull
    private final UserIdentity user;
    /**
     * A challenge intended to be used for generating the newly created credential’s attestation object. See the <a
     * href="https://www.w3.org/TR/webauthn/#cryptographic-challenges">§13.1 Cryptographic
     * Challenges</a> security consideration.
     */
    @Nonnull
    private final ByteArray challenge;
    /**
     * Information about the desired properties of the credential to be created.
     * <p>
     * The sequence is ordered from most preferred to least preferred. The client makes a best-effort to create the most
     * preferred credential that it can.
     * </p>
     */
    @Nonnull
    private final List<PublicKeyCredentialParameters> pubKeyCredParams;
    /**
     * A time, in milliseconds, that the caller is willing to wait for the call to complete. This is treated as a hint,
     * and MAY be overridden by the client.
     */
    @Nonnull
    private final Optional<Long> timeout;
    /**
     * Intended for use by Relying Parties that wish to limit the creation of multiple credentials for the same account
     * on a single authenticator. The client is requested to return an error if the new credential would be created on
     * an authenticator that also contains one of the credentials enumerated in this parameter.
     */
    @Nonnull
    private final Optional<Set<PublicKeyCredentialDescriptor>> excludeCredentials;
    /**
     * Intended for use by Relying Parties that wish to select the appropriate authenticators to participate in the
     * create() operation.
     */
    @Nonnull
    private final Optional<AuthenticatorSelectionCriteria> authenticatorSelection;
    /**
     * Intended for use by Relying Parties that wish to express their preference for attestation conveyance. The default
     * is {@link AttestationConveyancePreference#NONE}.
     */
    @Nonnull
    private final AttestationConveyancePreference attestation;
    /**
     * Additional parameters requesting additional processing by the client and authenticator.
     * <p>
     * For example, the caller may request that only authenticators with certain capabilities be used to create the
     * credential, or that particular information be returned in the attestation object. Some extensions are defined in
     * <a href="https://www.w3.org/TR/webauthn/#extensions">§9 WebAuthn Extensions</a>; consult the
     * IANA "WebAuthn Extension Identifier" registry established by
     * <a href="https://tools.ietf.org/html/draft-hodges-webauthn-registries">[WebAuthn-Registries]</a> for an
     * up-to-date list of registered WebAuthn Extensions.
     * </p>
     */
    @Nonnull
    private final RegistrationExtensionInputs extensions;

    private PublicKeyCredentialCreationOptions(
            @Nonnull RelyingPartyIdentity rp, 
            @Nonnull UserIdentity user, 
            @Nonnull ByteArray challenge, 
            @Nonnull List<PublicKeyCredentialParameters> pubKeyCredParams, 
            @Nonnull Optional<Long> timeout, 
            @Nonnull Optional<Set<PublicKeyCredentialDescriptor>> excludeCredentials, 
            @Nonnull Optional<AuthenticatorSelectionCriteria> authenticatorSelection, 
            @Nonnull AttestationConveyancePreference attestation, 
            @Nonnull RegistrationExtensionInputs extensions) {
        this.rp = rp;
        this.user = user;
        this.challenge = challenge;
        this.pubKeyCredParams = CollectionUtil.immutableList(pubKeyCredParams);
        this.timeout = timeout;
        this.excludeCredentials = excludeCredentials.map(TreeSet::new).map(CollectionUtil::immutableSortedSet);
        this.authenticatorSelection = authenticatorSelection;
        this.attestation = attestation;
        this.extensions = extensions;
    }

    @JsonCreator
    private PublicKeyCredentialCreationOptions(
            @Nonnull @JsonProperty("rp") RelyingPartyIdentity rp, 
            @Nonnull @JsonProperty("user") UserIdentity user, 
            @Nonnull @JsonProperty("challenge") ByteArray challenge, 
            @Nonnull @JsonProperty("pubKeyCredParams") List<PublicKeyCredentialParameters> pubKeyCredParams, 
            @JsonProperty("timeout") Long timeout, 
            @JsonProperty("excludeCredentials") Set<PublicKeyCredentialDescriptor> excludeCredentials, 
            @JsonProperty("authenticatorSelection") AuthenticatorSelectionCriteria authenticatorSelection, 
            @Nonnull @JsonProperty("attestation") AttestationConveyancePreference attestation,
            @JsonProperty("extensions") RegistrationExtensionInputs extensions) {
        
        this(rp,user, challenge, pubKeyCredParams,
                Optional.ofNullable(timeout),
                Optional.ofNullable(excludeCredentials),
                Optional.ofNullable(authenticatorSelection), attestation,
                Optional.ofNullable(extensions).orElseGet(() -> RegistrationExtensionInputs.builder().build()));
    }

    public static PublicKeyCredentialCreationOptionsBuilder.MandatoryStages builder() {
        return new PublicKeyCredentialCreationOptionsBuilder.MandatoryStages();
    }


    public static class PublicKeyCredentialCreationOptionsBuilder {
        private RelyingPartyIdentity rp;
        private UserIdentity user;
        private ByteArray challenge;
        private List<PublicKeyCredentialParameters> pubKeyCredParams;
        private AttestationConveyancePreference attestation = AttestationConveyancePreference.NONE;
        private RegistrationExtensionInputs extensions = RegistrationExtensionInputs.builder().build();
        @Nonnull
        private Optional<Long> timeout = Optional.empty();
        @Nonnull
        private Optional<Set<PublicKeyCredentialDescriptor>> excludeCredentials = Optional.empty();
        @Nonnull
        private Optional<AuthenticatorSelectionCriteria> authenticatorSelection = Optional.empty();

        public static class MandatoryStages {
            private final PublicKeyCredentialCreationOptionsBuilder builder = new PublicKeyCredentialCreationOptionsBuilder();

            /**
             * @param rp
             * @return 
             * @see PublicKeyCredentialCreationOptions#getRp()
             */
            public StageUserIdentity rp(RelyingPartyIdentity rp) {
                builder.rp(rp);
                return new StageUserIdentity();
            }

            /**
             * @see PublicKeyCredentialCreationOptions#getUser()
             */
            public class StageUserIdentity {
                public StageChallenge user(UserIdentity user) {
                    builder.user(user);
                    return new StageChallenge();
                }
            }

            /**
             * @see PublicKeyCredentialCreationOptions#getChallenge()
             */
            public class StageChallenge {
                public StagePublicKeyCredentialParams challenge(ByteArray challenge) {
                    builder.challenge(challenge);
                    return new StagePublicKeyCredentialParams();
                }
            }

            /**
             * @see PublicKeyCredentialCreationOptions#getPubKeyCredParams()
             */
            public class StagePublicKeyCredentialParams {
                public PublicKeyCredentialCreationOptionsBuilder pubKeyCredParams(List<PublicKeyCredentialParameters> pubKeyCredParams) {
                    return builder.pubKeyCredParams(pubKeyCredParams);
                }
            }
        }

        /**
         * A time, in milliseconds, that the caller is willing to wait for the call to complete. This is treated as a hint,
         * and MAY be overridden by the client.
         * @param timeout
         * @return 
         */
        public PublicKeyCredentialCreationOptionsBuilder timeout(@Nonnull Optional<Long> timeout) {
            this.timeout = timeout;
            return this;
        }

        /**
         * A time, in milliseconds, that the caller is willing to wait for the call to complete. This is treated as a hint,
         * and MAY be overridden by the client.
         * @param timeout
         * @return 
         */
        public PublicKeyCredentialCreationOptionsBuilder timeout(long timeout) {
            return this.timeout(Optional.of(timeout));
        }

        /**
         * Intended for use by Relying Parties that wish to limit the creation of multiple credentials for the same account
         * on a single authenticator. The client is requested to return an error if the new credential would be created on
         * an authenticator that also contains one of the credentials enumerated in this parameter.
         * @param excludeCredentials
         * @return 
         */
        public PublicKeyCredentialCreationOptionsBuilder excludeCredentials(@Nonnull Optional<Set<PublicKeyCredentialDescriptor>> excludeCredentials) {
            this.excludeCredentials = excludeCredentials;
            return this;
        }

        /**
         * Intended for use by Relying Parties that wish to limit the creation of multiple credentials for the same account
         * on a single authenticator. The client is requested to return an error if the new credential would be created on
         * an authenticator that also contains one of the credentials enumerated in this parameter.
         * @param excludeCredentials
         * @return 
         */
        public PublicKeyCredentialCreationOptionsBuilder excludeCredentials(@Nonnull Set<PublicKeyCredentialDescriptor> excludeCredentials) {
            return this.excludeCredentials(Optional.of(excludeCredentials));
        }

        /**
         * Intended for use by Relying Parties that wish to select the appropriate authenticators to participate in the
         * create() operation.
         * @param authenticatorSelection
         * @return 
         */
        public PublicKeyCredentialCreationOptionsBuilder authenticatorSelection(@Nonnull Optional<AuthenticatorSelectionCriteria> authenticatorSelection) {
            this.authenticatorSelection = authenticatorSelection;
            return this;
        }

        /**
         * Intended for use by Relying Parties that wish to select the appropriate authenticators to participate in the
         * create() operation.
         * @param authenticatorSelection
         * @return 
         */
        public PublicKeyCredentialCreationOptionsBuilder authenticatorSelection(@Nonnull AuthenticatorSelectionCriteria authenticatorSelection) {
            return this.authenticatorSelection(Optional.of(authenticatorSelection));
        }

        PublicKeyCredentialCreationOptionsBuilder() {
        }

        /**
         * Contains data about the Relying Party responsible for the request.
         * <p>
         * Its value's {@link RelyingPartyIdentity#id id} member specifies the <a href="https://www.w3.org/TR/webauthn/#rp-id">RP
         * ID</a> the credential should be scoped to. If omitted, its value will be set by the client. See {@link
         * RelyingPartyIdentity} for further details.
         * </p>
         * @param rp
         * @return 
         */
        public PublicKeyCredentialCreationOptionsBuilder rp(@Nonnull final RelyingPartyIdentity rp) {
            this.rp = rp;
            return this;
        }

        /**
         * Contains data about the user account for which the Relying Party is requesting attestation.
         * @param user
         * @return 
         */
        public PublicKeyCredentialCreationOptionsBuilder user(@Nonnull final UserIdentity user) {
            this.user = user;
            return this;
        }

        /**
         * A challenge intended to be used for generating the newly created credential’s attestation object. See the <a

         * href="https://www.w3.org/TR/webauthn/#cryptographic-challenges">§13.1 Cryptographic

         * Challenges</a> security consideration.
         * @param challenge
         * @return 
         */
        public PublicKeyCredentialCreationOptionsBuilder challenge(@Nonnull final ByteArray challenge) {
            this.challenge = challenge;
            return this;
        }

        /**
         * Information about the desired properties of the credential to be created.
         * <p>
         * The sequence is ordered from most preferred to least preferred. The client makes a best-effort to create the most
         * preferred credential that it can.
         * </p>
         * @param pubKeyCredParams
         * @return 
         */
        public PublicKeyCredentialCreationOptionsBuilder pubKeyCredParams(@Nonnull final List<PublicKeyCredentialParameters> pubKeyCredParams) {
            this.pubKeyCredParams = pubKeyCredParams;
            return this;
        }

        /**
         * Intended for use by Relying Parties that wish to express their preference for attestation conveyance. The default

         * is {@link AttestationConveyancePreference#NONE}.
         * @param attestation
         * @return 
         */
        public PublicKeyCredentialCreationOptionsBuilder attestation(@Nonnull final AttestationConveyancePreference attestation) {
            this.attestation = attestation;
            return this;
        }

        /**
         * Additional parameters requesting additional processing by the client and authenticator.
         * <p>
         * For example, the caller may request that only authenticators with certain capabilities be used to create the
         * credential, or that particular information be returned in the attestation object. Some extensions are defined in
         * <a href="https://www.w3.org/TR/webauthn/#registration-extension">§9 WebAuthn Extensions</a>; consult the
         * IANA "WebAuthn Extension Identifier" registry established by
         * <a href="https://tools.ietf.org/html/draft-hodges-webauthn-registries">[WebAuthn-Registries]</a> for an
         * up-to-date list of registered WebAuthn Extensions.
         * </p>
         * @param extensions
         * @return 
         */
        public PublicKeyCredentialCreationOptionsBuilder extensions(@Nonnull final RegistrationExtensionInputs extensions) {
            this.extensions = extensions;
            return this;
        }

        public PublicKeyCredentialCreationOptions build() {
            
            return new PublicKeyCredentialCreationOptions(rp, user, challenge, pubKeyCredParams, timeout, excludeCredentials, authenticatorSelection, attestation, extensions);
        }

    }

    public PublicKeyCredentialCreationOptionsBuilder toBuilder() {
        return new PublicKeyCredentialCreationOptionsBuilder().rp(this.rp).user(this.user).challenge(this.challenge).pubKeyCredParams(this.pubKeyCredParams).timeout(this.timeout).excludeCredentials(this.excludeCredentials).authenticatorSelection(this.authenticatorSelection).attestation(this.attestation).extensions(this.extensions);
    }

    /**
     * Contains data about the Relying Party responsible for the request.
     * <p>
     * Its value's {@link RelyingPartyIdentity#id id} member specifies the <a href="https://www.w3.org/TR/webauthn/#rp-id">RP
     * ID</a> the credential should be scoped to. If omitted, its value will be set by the client. See {@link
     * RelyingPartyIdentity} for further details.
     * </p>
     * @return 
     */
    @Nonnull
    public RelyingPartyIdentity getRp() {
        return this.rp;
    }

    /**
     * Contains data about the user account for which the Relying Party is requesting attestation.
     * @return 
     */
    @Nonnull
    public UserIdentity getUser() {
        return this.user;
    }

    /**
     * A challenge intended to be used for generating the newly created credential’s attestation object. See the <a
     * href="https://www.w3.org/TR/webauthn/#cryptographic-challenges">§13.1 Cryptographic
     * Challenges</a> security consideration.
     * @return 
     */
    @Nonnull
    public ByteArray getChallenge() {
        return this.challenge;
    }

    /**
     * Information about the desired properties of the credential to be created.
     * <p>
     * The sequence is ordered from most preferred to least preferred. The client makes a best-effort to create the most
     * preferred credential that it can.
     * </p>
     * @return 
     */
    @Nonnull
    public List<PublicKeyCredentialParameters> getPubKeyCredParams() {
        return this.pubKeyCredParams;
    }

    /**
     * A time, in milliseconds, that the caller is willing to wait for the call to complete. This is treated as a hint,
     * and MAY be overridden by the client.
     * @return 
     */
    @Nonnull
    public Optional<Long> getTimeout() {
        return this.timeout;
    }

    /**
     * Intended for use by Relying Parties that wish to limit the creation of multiple credentials for the same account
     * on a single authenticator. The client is requested to return an error if the new credential would be created on
     * an authenticator that also contains one of the credentials enumerated in this parameter.
     * @return 
     */
    @Nonnull
    public Optional<Set<PublicKeyCredentialDescriptor>> getExcludeCredentials() {
        return this.excludeCredentials;
    }

    /**
     * Intended for use by Relying Parties that wish to select the appropriate authenticators to participate in the
     * create() operation.
     * @return 
     */
    @Nonnull
    public Optional<AuthenticatorSelectionCriteria> getAuthenticatorSelection() {
        return this.authenticatorSelection;
    }

    /**
     * Intended for use by Relying Parties that wish to express their preference for attestation conveyance. The default
     * is {@link AttestationConveyancePreference#NONE}.
     * @return 
     */
    @Nonnull
    public AttestationConveyancePreference getAttestation() {
        return this.attestation;
    }

    /**
     * Additional parameters requesting additional processing by the client and authenticator.
     * <p>
     * For example, the caller may request that only authenticators with certain capabilities be used to create the
     * credential, or that particular information be returned in the attestation object. Some extensions are defined in
     * <a href="https://www.w3.org/TR/webauthn/#extensions">§9 WebAuthn Extensions</a>; consult the
     * IANA "WebAuthn Extension Identifier" registry established by
     * <a href="https://tools.ietf.org/html/draft-hodges-webauthn-registries">[WebAuthn-Registries]</a> for an
     * up-to-date list of registered WebAuthn Extensions.
     * </p>
     * @return 
     */
    @Nonnull
    public RegistrationExtensionInputs getExtensions() {
        return this.extensions;
    }
}
